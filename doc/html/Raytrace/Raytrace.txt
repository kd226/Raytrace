-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Path traycer
--   
--   Please see README.md
@package Raytrace
@version 0.1.0.0


-- | Module containing types used in Raytace library.
module Types
type Color = Vec3
clamp :: Color -> Color
addMix :: Color -> Color -> Color
subMix :: Color -> Color -> Color
prodMix :: Color -> Color -> Color
type Point3 = Vec3

-- | BRDF models with their corresponding descriptions (Bounce Reflect
--   Diffuse Functions).
data BRDF

-- | Lambertian reflectance BRDF.
Lambert :: Color -> BRDF

-- | Color of lambertian surface.
[color] :: BRDF -> Color

-- | Perfect reflection BRDF.
Reflection :: Double -> Double -> Color -> BRDF

-- | Index of refraction of material inside the shape.
[inRI] :: BRDF -> Double

-- | Index of refraction of material outside the shape.
[outRI] :: BRDF -> Double

-- | Color of lambertian surface.
[color] :: BRDF -> Color

-- | Perfect refraction BRDF.
Refraction :: Double -> Double -> Color -> BRDF

-- | Index of refraction of material inside the shape.
[inRI] :: BRDF -> Double

-- | Index of refraction of material outside the shape.
[outRI] :: BRDF -> Double

-- | Color of lambertian surface.
[color] :: BRDF -> Color

-- | Generic emmisive BRDF.
Emmisive :: Color -> BRDF

-- | Color of lambertian surface.
[color] :: BRDF -> Color

-- | Material of specific point.
data Material
Material :: [(Double, BRDF)] -> Material

-- | Pairs of and brdfs. In order for material to be realistic sum of must
--   be lower or equal to 1.
[brdfs] :: Material -> [(Double, BRDF)]

-- | Ray in three dimensions.
data Ray
Ray :: Point3 -> Normal3 -> Ray

-- | Point from which the ray starts.
[base] :: Ray -> Point3

-- | Direction in which ray is pointing.
[direction] :: Ray -> Normal3

-- | All information about intersection.
data Intersection
Intersection :: Normal3 -> Point3 -> Ray -> Material -> Intersection

-- | Normal of intersection.
[normalI] :: Intersection -> Normal3

-- | Point of intersection.
[point] :: Intersection -> Point3

-- | Ray which intersected.
[ray] :: Intersection -> Ray

-- | Material at point of intersection.
[material] :: Intersection -> Material

-- | Scenes description.
data Scene
Scene :: [Shape] -> [Light] -> Color -> Color -> Scene

-- | Shapes in a scene.
[shapes] :: Scene -> [Shape]

-- | Lights in a scene.
[lights] :: Scene -> [Light]

-- | Ambient light of a scene (light that doesn't depend on visibility from
--   any light source).
[ambientLight] :: Scene -> Color
[backgroundColor] :: Scene -> Color

-- | View description.
data View
View :: Point3 -> Double -> Normal3 -> Normal3 -> Double -> View

-- | Cameras position in the scene
[camera] :: View -> Point3

-- | Clipping plane of a camera (how close the objects can be seen)
[clipPlane] :: View -> Double

-- | Normal vector of where the camera is facing
[forward] :: View -> Normal3

-- | Normal vector of where the camera has "up" direction in
[up] :: View -> Normal3

-- | Angle between point most to the left and most to the right, as seen by
--   the camera
[fov] :: View -> Double

-- | Description of whole Raytrace world with all settings needed to render
--   the scene.
data World

-- | Scene to be rendered, view from which to render, depth of ray bounces,
--   number of frames to be averaged width and height of output render
World :: !Scene -> !View -> !Int -> !Int -> !Int -> !Int -> World
scene :: World -> Scene
view :: World -> View
rayDepth :: World -> Int
samples :: World -> Int
width :: World -> Int
height :: World -> Int

-- | Shapes in the scene
data Shape

-- | Spherical shape.
Sphere :: Point3 -> Double -> (Point3 -> Material) -> Shape

-- | Center of a sphere.
[center] :: Shape -> Point3

-- | Radius of a sphere.
[radius] :: Shape -> Double

-- | Function that describes material of point on a sphere.
[materialFunc] :: Shape -> Point3 -> Material

-- | Shape as two sided infinte plane.
Plane :: Normal3 -> Double -> (Point3 -> Material) -> Shape

-- | Normal direction of a sphere.
[normal] :: Shape -> Normal3

-- | Distance from an origin - (0,0,0) along normal.
[distance] :: Shape -> Double

-- | Function that describes material of point on a sphere.
[materialFunc] :: Shape -> Point3 -> Material

-- | Light point used as general check if point is lit
type Light = Point3
instance GHC.Show.Show Types.Scene
instance GHC.Show.Show Types.Shape
instance GHC.Classes.Eq Types.View
instance GHC.Classes.Eq Types.Intersection
instance GHC.Classes.Eq Types.Ray
instance GHC.Classes.Eq Types.Material
instance GHC.Classes.Eq Types.BRDF
instance GHC.Classes.Eq Data.Vect.Double.Base.Vec3
instance GHC.Classes.Eq Data.Vect.Double.Base.Normal3
instance GHC.Classes.Eq Types.Shape
instance GHC.Show.Show (Types.Point3 -> Types.Material)


-- | This module contains simple predefined colors and procedural texture
--   functions.
module Predefined
red :: Color
green :: Color
blue :: Color
white :: Color
black :: Color
grey :: Color
flatRed :: Point3 -> Material
shinyRed :: Point3 -> Material
greenShinyRed :: Point3 -> Material

-- | Glass is fully reflective and refractive (conservation of energy is
--   calculated from Fresnels law).
glass :: Point3 -> Material
flatWhite :: Point3 -> Material
flatBlack :: Point3 -> Material

-- | Creates a light material with specified color and 100% of emmision.
lightBulb :: Color -> Point3 -> Material

-- | Alternate 20x20x20 black and white cubes.
checkedMatt :: Point3 -> Material
flatBlue :: Point3 -> Material
flatGreen :: Point3 -> Material
mirror :: Point3 -> Material


-- | This module contains functions used to build and manipulate everything
--   that is to be rendered. They should be used in state monad as with
--   modify function, however in case of different need they are defined as
--   pure modifiers.
module SceneBuilder

-- | Just an empty scene without any objects, with <a>grey</a> ambient
--   light and <a>black</a> background.
emptyScene :: Scene

-- | Adds shape to a scene
addShape :: Shape -> Scene -> Scene

-- | Adds spherical light to a scene
addLight :: Point3 -> Double -> Color -> Scene -> Scene

-- | Changes ambient light in a scene
setAmbientLight :: Color -> Scene -> Scene

-- | Changes background color of a scene
setBackgroundColor :: Color -> Scene -> Scene

-- | Sample view with camera at (0,0,0), looking in (0,0,1) direction,
--   oriented along y and with field of view equal 110
sampleView :: View

-- | Yaws camera forward, that is rotates around vertical/right vector
yawCamera :: Double -> View -> View

-- | Moves camera to a new position
positionCamera :: Vec3 -> View -> View

-- | Sample <a>World</a> with <a>emptyScene</a> and <a>sampleView</a> with
--   ray depth of 10, 1 frame to render and resolution of 500x500
sampleWorld :: World
setScene :: Scene -> World -> World
setView :: View -> World -> World
setRayDepth :: Int -> World -> World
setSamples :: Int -> World -> World
setWidth :: Int -> World -> World
setHeight :: Int -> World -> World


-- | This is an entry point to internals of Raytrace.
module Raytracer

-- | Send a ray and return its color.
raytrace :: Double -> Int -> Ray -> ReaderT World (Rand StdGen) Color
roots :: Double -> Double -> Double -> [Double]


-- | This module contains functions used to render result image and save
--   it.
module Rendering

-- | Generic Bitmap type with fast acces to it's size
data Bitmap a

-- | List of pixels of type a
pixels :: Bitmap a -> [a]
width :: World -> Int
height :: World -> Int

-- | Save color <a>Bitmap</a> to .pmm file.
savePPM :: FilePath -> Bitmap Color -> IO ()

-- | Render all frames specified in <a>World</a> and return renderd bitmap
--   of colors !! Will propabli become default rendering function in the
--   future
renderAll_ :: Reader World (Bitmap Color)

-- | Renders all frames specified in <a>World</a> and save them to a file
renderAll :: String -> ReaderT World IO ()

-- | Render all frames specified in World and save them to file, notifing
--   each time a frame is rendered.
renderAllNotified :: String -> ReaderT World IO ()
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (Rendering.Bitmap a)
instance Control.DeepSeq.NFData Data.Vect.Double.Base.Vec3
instance Control.DeepSeq.NFData Types.Ray
instance Control.DeepSeq.NFData Data.Vect.Double.Base.Normal3
